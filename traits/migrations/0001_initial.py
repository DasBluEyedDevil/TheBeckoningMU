# Generated by Django 5.2.7 on 2025-10-21 12:50

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("objects", "0014_defaultobject_defaultcharacter_defaultexit_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="DisciplinePower",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the discipline power",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "level",
                    models.PositiveSmallIntegerField(
                        help_text="Discipline level required to learn this power"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Complete description of the power's effects"
                    ),
                ),
                (
                    "amalgam_level",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Required level in secondary discipline",
                        null=True,
                    ),
                ),
                (
                    "dice_pool",
                    models.CharField(
                        blank=True,
                        help_text="Dice pool for this power (e.g., 'Resolve + Auspex')",
                        max_length=100,
                    ),
                ),
                (
                    "cost",
                    models.CharField(
                        blank=True,
                        help_text="Blood cost or other requirements",
                        max_length=50,
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        blank=True, help_text="How long the power lasts", max_length=100
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order within discipline level"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is this power currently available?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["discipline", "level", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Trait",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the trait", max_length=100, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="In-game description for the trait"
                    ),
                ),
                (
                    "is_instanced",
                    models.BooleanField(
                        default=False,
                        help_text="Can this trait be taken multiple times with different focuses? (e.g., Allies, Contacts)",
                    ),
                ),
                (
                    "has_specialties",
                    models.BooleanField(
                        default=False,
                        help_text="Can this trait have specialties? (e.g., Skills, some Advantages)",
                    ),
                ),
                (
                    "splat_restriction",
                    models.CharField(
                        blank=True,
                        help_text="Restricts trait to specific character type (e.g., 'vampire', 'ghoul')",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "min_value",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Minimum rating for this trait"
                    ),
                ),
                (
                    "max_value",
                    models.PositiveSmallIntegerField(
                        default=5, help_text="Maximum rating for this trait"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order within category"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Is this trait currently available for use?",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["category__sort_order", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="TraitCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Category name (e.g., 'Attributes', 'Skills', 'Disciplines')",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Short code for internal use (e.g., 'attributes', 'skills')",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this trait category"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order for this category"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Trait Categories",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="CharacterBio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        blank=True, help_text="Character's full name", max_length=200
                    ),
                ),
                (
                    "concept",
                    models.CharField(
                        blank=True, help_text="Character concept", max_length=100
                    ),
                ),
                (
                    "ambition",
                    models.TextField(
                        blank=True, help_text="Character's driving ambition"
                    ),
                ),
                (
                    "desire",
                    models.TextField(
                        blank=True, help_text="Character's immediate desire"
                    ),
                ),
                (
                    "clan",
                    models.CharField(
                        blank=True, help_text="Vampire clan", max_length=50
                    ),
                ),
                (
                    "sire",
                    models.CharField(
                        blank=True, help_text="Character's sire", max_length=100
                    ),
                ),
                (
                    "generation",
                    models.PositiveSmallIntegerField(
                        blank=True, help_text="Vampire generation", null=True
                    ),
                ),
                (
                    "predator_type",
                    models.CharField(
                        blank=True, help_text="Predator type", max_length=50
                    ),
                ),
                (
                    "splat",
                    models.CharField(
                        default="mortal",
                        help_text="Character type (vampire, ghoul, mortal)",
                        max_length=20,
                    ),
                ),
                (
                    "approved",
                    models.BooleanField(
                        default=False, help_text="Has this character been approved?"
                    ),
                ),
                (
                    "approved_by",
                    models.CharField(
                        blank=True,
                        help_text="Who approved this character",
                        max_length=100,
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When was this character approved",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vtm_bio",
                        to="objects.objectdb",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CharacterTrait",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Character's rating in this trait"
                    ),
                ),
                (
                    "instance_name",
                    models.CharField(
                        blank=True,
                        help_text="Specific instance of this trait (for instanced traits)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "specialty",
                    models.CharField(
                        blank=True,
                        help_text="Specialty within this trait (for skills and some advantages)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "xp_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="Total XP spent on this trait"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_traits",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_assignments",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "ordering": [
                    "trait__category__sort_order",
                    "trait__sort_order",
                    "trait__name",
                ],
                "unique_together": {
                    ("character", "trait", "instance_name", "specialty")
                },
            },
        ),
        migrations.CreateModel(
            name="CharacterPower",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "xp_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="XP spent to learn this power"
                    ),
                ),
                (
                    "learned_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this power was learned"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_powers",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who taught this power (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="taught_powers",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "power",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_assignments",
                        to="traits.disciplinepower",
                    ),
                ),
            ],
            options={
                "ordering": ["power__discipline", "power__level", "power__name"],
                "unique_together": {("character", "power")},
            },
        ),
        migrations.CreateModel(
            name="ExperienceTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="XP amount (positive for gained, negative for spent)"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        help_text="Reason for this XP transaction", max_length=200
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        default="misc",
                        help_text="Category of transaction",
                        max_length=50,
                    ),
                ),
                (
                    "approved_by",
                    models.CharField(
                        blank=True,
                        help_text="Staff member who approved this transaction",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="xp_transactions",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "related_power",
                    models.ForeignKey(
                        blank=True,
                        help_text="Power this XP was spent on",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="traits.characterpower",
                    ),
                ),
                (
                    "related_trait",
                    models.ForeignKey(
                        blank=True,
                        help_text="Trait this XP was spent on",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="traits.charactertrait",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="disciplinepower",
            name="amalgam_discipline",
            field=models.ForeignKey(
                blank=True,
                help_text="Required secondary discipline for Amalgam powers",
                limit_choices_to={"category__code": "disciplines"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="amalgam_powers",
                to="traits.trait",
            ),
        ),
        migrations.AddField(
            model_name="disciplinepower",
            name="discipline",
            field=models.ForeignKey(
                limit_choices_to={"category__code": "disciplines"},
                on_delete=django.db.models.deletion.CASCADE,
                related_name="powers",
                to="traits.trait",
            ),
        ),
        migrations.AddField(
            model_name="trait",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="traits",
                to="traits.traitcategory",
            ),
        ),
        migrations.CreateModel(
            name="TraitPrerequisite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "required_rating",
                    models.PositiveSmallIntegerField(
                        default=1, help_text="Minimum required rating"
                    ),
                ),
                (
                    "required_instance",
                    models.CharField(
                        blank=True,
                        help_text="Required instance (for instanced traits)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "required_splat",
                    models.CharField(
                        blank=True,
                        help_text="Required character type (e.g., 'vampire')",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "validation_function",
                    models.CharField(
                        blank=True,
                        help_text="Name of custom validation function",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.CharField(
                        default="Prerequisites not met",
                        help_text="Message to show when prerequisite fails",
                        max_length=200,
                    ),
                ),
                (
                    "required_trait",
                    models.ForeignKey(
                        help_text="Required trait",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enables_traits",
                        to="traits.trait",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prerequisites",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "ordering": ["trait", "required_trait"],
            },
        ),
        migrations.AlterUniqueTogether(
            name="disciplinepower",
            unique_together={("discipline", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="trait",
            unique_together={("name", "category")},
        ),
        migrations.CreateModel(
            name="TraitValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.IntegerField(help_text="Valid rating/value for this trait"),
                ),
                (
                    "cost",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="XP cost to purchase this level (if applicable)",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of this rating level",
                        max_length=200,
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="valid_values",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "ordering": ["trait", "value"],
                "unique_together": {("trait", "value")},
            },
        ),
    ]
